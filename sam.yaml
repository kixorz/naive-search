AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31

Parameters:
  Stage:
    Type: String
    AllowedValues:
      - dev
      - prod
    Default: dev
    Description: Stage that can be added to resource names
  ToolsBucket:
    Type: String
    Description: Tools bucket

Resources:
  RDSDBClusterParameterGroup:
    Type: AWS::RDS::DBClusterParameterGroup
    Properties:
      Description: search
      Family: aurora5.6
      Parameters:
        time_zone: US/Eastern

  RDSCluster:
    Type: "AWS::RDS::DBCluster"
    Properties:
      Engine: aurora
      DatabaseName: search
      MasterUsername: search
      MasterUserPassword: searchpassword123
      DBClusterParameterGroupName:
        Ref: RDSDBClusterParameterGroup

  RDSDBParameterGroup:
    Type: AWS::RDS::DBParameterGroup
    Properties:
      Description: search
      Family: aurora5.6
      Parameters:
        sql_mode: IGNORE_SPACE

  RDSDBInstance1:
    Type: AWS::RDS::DBInstance
    Properties:
      DBParameterGroupName:
        Ref: RDSDBParameterGroup
      Engine: aurora
      DBClusterIdentifier:
        Ref: RDSCluster
      PubliclyAccessible: true
      DBInstanceClass: db.r4.4xlarge

  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Import instance security group
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0

  EC2InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Action:
          - 'sts:AssumeRole'
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      Path: /
      Policies:
      - PolicyName: ToolsAccess
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Resource:
            - !Sub 'arn:aws:s3:::${ToolsBucket}/*'
            Action:
            - 's3:GetObject'
            - 's3:GetObjectVersion'

  EC2InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    DependsOn: RDSDBInstance1
    Properties:
      Roles:
        - !Ref EC2InstanceRole

  EC2Instance:
    Type: AWS::EC2::Instance
    DependsOn: EC2InstanceProfile
    Properties:
      ImageId: ami-04681a1dbd79675a5
      IamInstanceProfile: !Ref EC2InstanceProfile
      KeyName: asearch
      InstanceType: c5.9xlarge
      SecurityGroups:
        - !Ref InstanceSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo yum install mysql -y
          cd /tmp
          rm -f *

          aws s3 cp s3://${ToolsBucket}/schema.sql .
          aws s3 cp s3://${ToolsBucket}/warsql-ec2-optimized .
          chmod +x ./warsql-ec2-optimized

          curl -s -L https://commoncrawl.s3.amazonaws.com/crawl-data/CC-MAIN-2018-34/wat.paths.gz | zcat | awk '{print "https://commoncrawl.s3.amazonaws.com/" $0}' > urls.txt

          CORES=`grep -c ^processor /proc/cpuinfo`
          URLS=`wc -l < urls.txt`
          JOBS=$((URLS / CORES))
          split --lines=$JOBS --numeric-suffixes urls.txt job

          RDS=${RDSDBInstance1.Endpoint.Address}
          mysql --user=search --password=searchpassword123 --host=$RDS search < schema.sql

          function each_file {
            while read in;
            do
              mysql --user=search --password=searchpassword123 --host=$RDS search -e "$3" &
              curl -s -L "$in" | zcat | ./warsql-ec2-optimized > $1;
            done < $2
          }

          for file in job*;
          do
            echo "File: "$file
            PIPE=fifo_$file
            mkfifo $PIPE
            SQL="LOAD DATA LOCAL INFILE '$PIPE' IGNORE INTO TABLE pages FIELDS TERMINATED BY ',' ENCLOSED BY '\"' (url, title, description)"
            each_file "$PIPE" "$file" "$SQL" &
          done

  SearchFunction:
    Type: AWS::Serverless::Function
    Properties:
      Handler: index.handler
      CodeUri: app/
      Runtime: nodejs4.3
      Policies: AWSLambdaBasicExecutionRole
      Events:
        ApiEventSource:
          Type: Api
          Properties:
            Path: /{proxy+}
            Method: ANY

Outputs:
  ApiUrl:
    Description: URL for application
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod'
    Export:
      Name: !Sub 'ApiUrl-${Stage}'